import installExtension, { REDUX_DEVTOOLS } from "electron-devtools-installer";
import { app, BrowserWindow, session, Menu } from "electron";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const template = [
  {
    label: "License",
    click: async () => {
      creatLicenseWindow();
    },
  },
];

const menu = Menu.buildFromTemplate(template);
Menu.setApplicationMenu(menu);

const creatLicenseWindow = (): void => {
  const licenseWindow = new BrowserWindow({
    height: 600,
    width: 800,
    icon: require("path").resolve(__dirname, "./holoP.png"),
  });

  licenseWindow.removeMenu();

  licenseWindow.loadFile(require("path").resolve(__dirname, "./license.html"));
  licenseWindow.show();
  // licenseWindow.webContents.openDevTools();
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1300,
    icon: require("path").resolve(__dirname, "./holoP.png"),
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  const isDev = process.env.APP_DEV
    ? process.env.APP_DEV.trim() == "true"
    : false;
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    const additional = isDev ? "'unsafe-eval'" : "";
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": [
          `default-src 'self' https://holodex.net https://*.googlevideo.com 'unsafe-inline'; 
          script-src 'self' 'unsafe-inline' https://www.youtube.com https://www.google.com ${additional}; 
          img-src 'self' https://img.youtube.com https://*.mzstatic.com https://*.ggpht.com https://*.ytimg.com data:; 
          frame-src 'self' https://www.youtube.com; 
          media-src 'self' blob:; 
          font-src 'self' https://fonts.gstatic.com;`,
        ],
      },
    });
  });

  const filter = {
    urls: ["https://img.youtube.com/*", "https://yt3.ggpht.com/*"],
  };

  session.defaultSession.webRequest.onHeadersReceived(
    filter,
    (details, callback) => {
      details.responseHeaders["access-control-allow-origin"] = ["*"];
      callback({ responseHeaders: details.responseHeaders });
    }
  );

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
  // installExtension(REDUX_DEVTOOLS).then((name) =>
  //   console.log(`Added Extension: ${name}`)
  // );
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
